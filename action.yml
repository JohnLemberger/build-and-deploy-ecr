name: "Build and Deploy to ECR"
description: "Builds an image from a dockerfile, and pushes it up to ECR"
inputs:
  deploy:
    description: "Whether to push the image to ECR after building it"
    required: false
    default: "true"
  ecr_uri:
    description: "The URI for the ECR repository"
    required: true
  access_key_id:
    description: "An AWS Access Key ID"
    required: true
  secret_access_key:
    description: "An AWS Secret Access Key"
    required: true
  github_ssh_key:
    description: "An SSH Private Key with access to any private repos you need"
    required: false
    default: ""
  healthcheck:
    description: "A healthcheck path, like /healthcheck"
    required: false
    default: "/healthcheck"
  port:
    description: "The port the server listens on"
    required: false
    default: 3000
runs:
  using: "composite"
  steps:
    - run: |
        BRANCH=$(echo ${{github.ref}} | cut -f3 -d'/')
        CONTAINER_IMAGE="${{inputs.ecr_uri}}/github/${{github.repository}}/${BRANCH}"
        CONTAINER_IMAGE=$(echo "$CONTAINER_IMAGE" | tr '[:upper:]' '[:lower:]')
        CONTAINER_IMAGE_SHA="${CONTAINER_IMAGE}:${{github.sha}}"
        CONTAINER_IMAGE_LATEST="${CONTAINER_IMAGE}:latest"
        AWS_REGION=$(echo "${{inputs.ecr_uri}}" | cut -f4 -d'.')
        AWS_ACCESS_KEY_ID="${{inputs.access_key_id}}" \
        AWS_SECRET_ACCESS_KEY="${{inputs.secret_access_key}}" \
          aws ecr get-login-password --region "${AWS_REGION}" | docker login --username AWS --password-stdin ${{inputs.ecr_uri}}
        # Only include the GITHUB_SSH_KEY if it exists
        [ -n "${{inputs.github_ssh_key}}" ] && ARG_GITHUB_SSH_KEY='--build-arg "GITHUB_SSH_KEY=${{inputs.github_ssh_key}}"'
        # Only include the GITHUB_SHA if it is used (supresses a warning)
        grep -q "GITHUB_SHA" ./Dockerfile > /dev/null && ARG_GITHUB_SHA='--build-arg "GITHUB_SHA=${{github.sha}}"'

        eval docker build \
          -t $CONTAINER_IMAGE_SHA \
          -t $CONTAINER_IMAGE_LATEST \
          $ARG_GITHUB_SSH_KEY \
          $ARG_GITHUB_SHA \
          . 

        # Healthcheck the built container
        docker run -d \
        -p ${{inputs.port}}:${{inputs.port}} -e "PORT=${{inputs.port}}" \
        -e "HEALTHCHECK=${{inputs.healthcheck}}" \
        --name test-container $CONTAINER_IMAGE_SHA

        ATTEMPT_COUNT=1
        MAX_ATTEMPTS=5

        HEALTHCHECK="http://localhost:${{inputs.port}}${{inputs.healthcheck}}"

        echo "Testing healthcheck ${HEALTHCHECK} : Attempt ${ATTEMPT_COUNT} of ${MAX_ATTEMPTS}"
        until $(curl --output /dev/null --silent --head --fail --max-time 5 "${HEALTHCHECK}"); do
          if [ ${ATTEMPT_COUNT} -eq ${MAX_ATTEMPTS} ];then
            echo "Container did not pass healthcheck"
            echo $(docker stop test-container) stopped.
            exit 1
          fi

          ATTEMPT_COUNT=$(($ATTEMPT_COUNT+1))
          sleep 5
          echo "Testing healthcheck ${HEALTHCHECK} : Attempt ${ATTEMPT_COUNT} of ${MAX_ATTEMPTS}"
        done

        echo "Healthcheck passed!"
        echo $(docker stop test-container) stopped.

        [ "${{inputs.deploy}}" = "true" ] \
          && docker push $CONTAINER_IMAGE_SHA \
          && docker push $CONTAINER_IMAGE_LATEST
      shell: bash
